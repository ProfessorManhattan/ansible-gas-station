# Load VIM Key Scheme for Mcfly
if [ -e /home/linuxbrew/.linuxbrew/bin/mcfly.bash ]
then
  export MCFLY_KEY_SCHEME=vim
fi

# Load wp-cli completions
if [ -e /usr/local/bin/wp ]
then
  source /usr/local/src/wp-cli/wp-completion.bash
fi

# Load direnv
if [ -e /usr/local/bin/direnv ]
then
  eval "$(direnv hook bash)"
fi

# Load googler completion
if [ -e /snap/bin/googler ]
then
  source /usr/local/src/googler/googler-completion.bash
  source /usr/local/src/googler/googler_at
fi

# Load autojump
if [ -e /usr/bin/autojump ]; then
  source /usr/share/autojump/autojump.bash
fi

# Load Starship
eval "$(starship init bash)"

# Set PATH
PATH=$HOME/.gem/bin:$PATH

### Aliases
# Change directories and view contents at the same time
cl() {
    DIR="$*";
        # if no DIR given, go home
        if [ $# -lt 1 ]; then
                DIR=$HOME;
    fi;
    builtin cd "${DIR}" && \
    # use your preferred ls command
        ls -F --color=auto
}

# Open bash with local Docker file
dockerssh() {
    if [ -z "$1" ]; then
        echo "Supply a Docker container name in order for this command to work."
        echo "Usage: dockerssh <container_name>"
    else
        docker exec -it $1 /bin/bash
    fi
}

# Checks status of a website on downforeveryoneorjustme.com
down4me() {
  curl -s "http://www.downforeveryoneorjustme.com/$1" | sed '/just you/!d;s/<[^>]*>//g';
}

# Used to provision machines using Ansible
provision () {
    if [ -z "$1" ]; then
        # Display usage if no parameters are given
        echo "Usage: provision <ansible_inventory_name>"
        echo "If an inventory name of 'test' is provided then the inventory should exist in inventories/test.yml"
        return 1
    else
        cd ~/Playbooks
        ansible-galaxy install -r requirements.yml
        if [ -z "$2" ]; then
            ansible-playbook --ask-vault-pass -i inventories/"$1".yml main.yml
        else
            ansible-playbook --ask-vault-pass -i inventories/"$1".yml "$2".yml
        fi
    fi
}

# Generate a random string of X length
randomstring() {
    if [ -z "$1" ]; then
        head /dev/urandom | tr -dc A-Za-z0-9 | head -c $1 ; echo ''
    else
        echo "Pass the number of characters you would like the string to be. Example: randomstring 14"
    fi
}

# Launch rclone admin GUI
rclonegui() {
  rclone rcd --rc-web-gui --rc-user=admin --rc-pass=pass --rc-serve
}

# Reset Docker to factory settings
resetdocker() {
    set +e
    CONTAINER_COUNT=$(docker ps -a -q | wc -l)
    if [ "$CONTAINER_COUNT" -gt 0 ]; then
        docker stop $(docker ps -a -q)
        docker rm $(docker ps -a -q)
    fi
    VOLUME_COUNT=$(docker volume ls -q | wc -l)
    if [ "$VOLUME_COUNT" -gt 0 ]; then
        docker volume rm $(docker volume ls -q)
    fi
    NETWORK_COUNT=$(docker network ls -q | wc -l)
    if [ "$NETWORK_COUNT" -gt 0 ]; then
        docker network rm $(docker network ls -q)
    fi
    docker system prune -a --force
}

# Source: https://itnext.io/bash-aliases-are-awesome-8a76aecc96ab
# Type ".. 5" to cd .. 5 times
..() {
    N=$(($1))
    if [ $N -lt 1 ]; then
        N=1
    fi
    while ((N)); do
        cd ..
        let N-=1
        done;
}

# Create an Authelia password hash
alias autheliapassword='docker run authelia/authelia:latest authelia hash-password'

# Shows IP addresses that are currently banned by fail2ban
alias banned='sudo zgrep "Ban" /var/log/fail2ban.log*'

# Removes all Ansible roles saved in ~/.ansible
alias clearroles='rm -rf ~/.ansible/roles/*'

alias connections='nm-connection-editor'

# Make copy command verbose
alias cp='cp -v'

# Copies with a progress bar
alias cpv='rsync -ah --info=progress2'

# Reload docker-compose.yml
alias docker-reboot='docker-compose stop && docker-compose up -d'

# Download a file
alias download='curl --continue-at - --location --progress-bar --remote-name --remote-time'

# Download a website
alias downloadsite='wget --mirror -p --convert-links -P'

# Flush DNS
alias flushdns='sudo systemd-resolve --flush-caches && sudo systemd-resolve --statistics'

# Get the possible GRUB resolutions
alias grubresolutions='sudo hwinfo --framebuffer'

# Execute git command with sudo priviledges while retaining .gitconfig
alias gsudo='sudo git -c "include.path="${XDG_CONFIG_DIR:-$HOME/.config}/git/config\" -c \"include.path=$HOME/.gitconfig\"'

# Create hashed password for Ansible user creation
alias hashpassword='mkpasswd --method=sha-512'

# Show full output when using ls
alias ls='ls -AlhF --color=auto'

# Create parent directories automatically
alias mkdir='mkdir -pv'

# Make mount command output readable
alias mount='mount | column -t'

# Make mv command verbose
alias mv='mv -v'

# Show IP address
alias myip='curl http://ipecho.net/plain; echo'

# Shows local IP addresses
alias mylocalip="ifconfig | grep -Eo 'inet (addr:|adr:)?([0-9]*\.){3}[0-9]*' | grep -Eo '([0-9]*\.){3}[0-9]*' | grep -v '127.0.0.1'"

# Show open ports
alias ports='sudo netstat -tulanp'

# Shuts down the computer, skipping the shutdown scripts
alias poweroff='sudo /sbin/poweroff'

# Open the Rclone web GUI
alias rclonegui='rclone rcd --rc-web-gui'

# Reboot the computer
alias reboot='sudo /sbin/reboot'

# Make rm command verbose
alias rm='rm -vi'

# Launch the Python Simple HTTP Server
alias serve='python -m SimpleHTTPServer'

# Generate a SHA1 digest
alias sha1='openssl sha1'

# Shutdown the computer
alias shutdown='sudo /sbin/shutdown'

# Speed test
alias speedtest='wget -O /dev/null http://speedtest.wdc01.softlayer.com/downloads/test10.zip'

# Shortcut for config file
alias sshconfig='${EDITOR:code} ~/.ssh/config'

# Pastebin
alias sprunge='curl -F "sprunge=<-" http://sprunge.us'

# Alias for sudo vim
alias svim='sudo vim'

# Disable Tor for current shell
alias toroff='source torsocks off'

# Enable Tor for current shell
alias toron='source torsocks on'

# Test Tor connection
alias tortest='curl --socks5-hostname 127.0.0.1:9050 --silent https://check.torproject.org/  | head -25'

# Unban IP address (e.g. unban 10.14.24.14)
alias unban='sudo fail2ban-client set sshd unbanip'

# Recursively encrypts files using Ansible Vault
alias unvaultdir='find . -type f -printf "%h/\"%f\" " | xargs ansible-vault decrypt'

# Alias for updating software
alias update='sudo apt-get update && sudo apt-get upgrade'

# Sets v as an alias for vim
alias v='vim'

# Recursively encrypts files using Ansible Vault
alias vaultdir='find . -type f -printf "%h/\"%f\" " | xargs ansible-vault encrypt'

# Shows nice looking report of weather
alias weather='curl -A curl wttr.in'
