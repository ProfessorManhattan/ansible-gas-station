---
- name: Ensure Megabyte Labs configuration directory exists
  file:
    mode: 0700
    path: '{{ item }}'
    state: directory
  loop:
    - ~/.config
    - ~/.config/megabytelabs

- name: 'Check if {{ app_name }} has configuration stored in ~/.config/megabytelabs/nvm'
  stat:
    path: '~/.config/megabytelabs/nvm'
  register: nvm_config

- name: 'Detect previously installed {{ app_name }} version'
  command: cat nvm
  args:
    chdir: ~/.config/megabytelabs
  changed_when: false
  register: current_nvm_version
  when: nvm_config.stat.exists

- name: 'Detect the latest {{ app_name }} version'
  uri:
    url: https://api.github.com/repos/nvm-sh/nvm/releases/latest
  register: nvm_latest_release_tag

- name: 'Determine whether or not the latest version of {{ app_name }} is already installed'
  set_fact:
    install_nvm: "{{ (current_nvm_version.skipped) or \
      ((not current_nvm_version.skipped) and (current_nvm_version.stdout != nvm_latest_release_tag.json.tag_name | replace('v','')) }}"

- name: 'Ensure older version of {{ app_name }} is uninstalled'
  file:
    path: '/home/{{ nvm_user }}/.nvm/nvm.sh'
    state: absent
  when: install_nvm

- name: 'Ensure {{ app_name }} is installed'
  shell: >
    set -o pipefail && curl -o- {{ 'https://raw.githubusercontent.com/nvm-sh/nvm/' + nvm_latest_release_tag.json.tag_name + '/install.sh' }} | bash
  args:
    creates: '/home/{{ nvm_user }}/.nvm/nvm.sh'
  when: install_nvm

- name: 'Make sure .bashrc imports {{ app_name }}'
  lineinfile:
    path: ~/.bashrc
    regex: \"\[\[ -r $NVM_DIR\/bash_completion \]\] && \\\. $NVM_DIR\/bash_completion\"
    line: '[[ -r $NVM_DIR/bash_completion ]] && \. $NVM_DIR/bash_completion'

- name: 'Save meta information about the version of {{ app_name }} that was installed'
  copy:
    dest: ~/.config/megabytelabs/nvm
    mode: 0600
    content: |
      {{ nvm_latest_release_tag.json.tag_name  | replace('v','') }}
  when: install_nvm
